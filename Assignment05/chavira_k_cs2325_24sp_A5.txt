# CS 2325/L
# Assignment 5
# 
# Name: Kate Chavira
# Buff-Id #: 1096539
#

SIP main
   ORG 0x90

   # test case 1
   array: DB 0x15, 0xF5, 0xFB, 0x0D, 0xD3, 0x04
          DB 0x1F, 0xFF, 0xF9, 0x12, 0x0B, 0xEA
   n: EQU 12  # n numbers to process

   # test case 2
   #array: DB 0xFF, 0x01, 0x01, 0xFF, 0x01, 0xFF
   #       DB 0x01, 0x01, 0xFF, 0xFF, 0xFF, 0x01
   #       DB 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x01
   #       DB 0xFF, 0x01, 0xFF, 0x01, 0xFF, 0xFF
   #       DB 0x01, 0xFF, 0xFF, 0x01, 0x01, 0xFF
   #n: EQU 30   # n numbers to process

   # test case 3
   #array: DB -2,  2, -1, -2, -3, -2
   #       DB -3, -2, -3,  1,  2, -2
   #       DB -3, -3,  2,  2,  2, -3
   #       DB  2, -1, -3, -3,  2,  2
   #       DB  1,  1, -1,  1, -2, -2
   #       DB -3,  1,  1,  2,  2, -2
   #       DB -1, -3,  2, -2,  1, -1
   #       DB -3, -1, -1,  2,  1, -2
   #       DB -2,  2,  1, -1,  1, -3
   #       DB -1, -3,  1, -1, -1, -2
   #       DB -1,  1,  1
   #n: EQU 70   # n numbers to process


   ns1: EQU 0xF0  # memory address to store negative sum 1
   ps1: EQU 0xF1  # memory address to store positive sum 1
   as1: EQU 0xF2  # memory address to store all sum 1
   ns2: EQU 0xF3  # memory address to store negative sum 2
   ps2: EQU 0xF4  # memory address to store positive sum 2
   as2: EQU 0xF5  # memory address to store all sum 2
   
   ORG 0x00

#PART 1
main_p1:
  LOAD R4, 0 #counter

LOOP_p1: 
  LOAD R0, n #size of array
  JMPEQ R4=R0, main_p2 #if counter==end of array,next loop
  LOAD R0, array  #nums in array
  ADD R0, R0, R4 #num=num+counter || (array++)
  ILOAD R0, [R0] #loading num_value into R0
  MOVE R2, R0 #move new value of num to R2
  SRL R0, 7   #shift 7 bits to the right
  LOAD R3, 0  #MSB == 0
  JMPEQ R3=R0, positive_loop_p1 #if MSB(0)==0 -> positive_loop_p1
  #else (if MSB(1)==0)-> negative
  LOAD R0, [ns1] #LOAD R0 with sum_neg mem addr
  ADD R0, R0, R2 #sum_neg = sum_neg + num_value
  STORE [ns1], R0 #store new sum_neg in mem addr
  JMP ALL_p1

positive_loop_p1:
  LOAD R0, [ps1] #LOAD R0 with sum_pos mem addr
  ADD R0, R0, R2 #sum_pos = sum_pos + num_value
  STORE [ps1], R0 #store new sum_pos in mem addr 
  JMP ALL_p1

ALL_p1:
  ADD R1, R1, R2 #all_num = all_num + num_value
  STORE [as1], R1 #store new all_num in mem addr
  LOAD R0, 1
  ADD R4, R4, R0 #counter++
  JMP LOOP_p1

#PART 2
main_p2:
  LOAD R4, 0 #counter
  LOAD R1,0 #reset all_sum

LOOP_p2:
  LOAD R0, n #size of array
  JMPEQ R4=R0, done #if counter==end of array,quit
  LOAD R0, array  #nums in array
  ADD R0, R0, R4 #num=num+counter || (array++)
  ILOAD R0, [R0] #loading num_value into R0
  LOAD R2, -1 
  XOR R0, R0, R2 #flipping(negating) num_value (negative)
  LOAD R2, 1
  ADD R0, R0, R2 #num_value + 1 = R0
  MOVE R2, R0 #move new value of num to R2
  SRL R0, 7 #shift 7 bits to the right
  LOAD R3, 0 #MSB == 0
  JMPEQ R3=R0, positive_loop_p2 #if MSB(0)==0 -> positive_loop_p2
  #else (if MSB(1)==0)-> negative
  LOAD R0, [ns2] #LOAD R0 with sum2_neg mem addr
  ADD R0, R0, R2 #sum2_neg = sum2_neg + num_value
  STORE [ns2], R0 #store new sum2_neg in mem addr
  JMP ALL_p2

positive_loop_p2:
  LOAD R0, [ps2] #LOAD R0 with sum2_pos mem addr
  ADD R0, R0, R2 #sum2_pos = sum2_pos + num_value
  STORE [ps2], R0 #store new sum2_pos in mem addr 
  JMP ALL_p2
  
ALL_p2:
  ADD R1, R1, R2 #all_num = all_num + num_value
  STORE [as2], R1 #store new all_num in mem addr
  LOAD R0, 1
  ADD R4, R4, R0 #counter++
  JMP LOOP_p2

done:
  HALT